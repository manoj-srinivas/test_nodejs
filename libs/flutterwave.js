const Flutterwave = require('flutterwave-node-v3');

// const flw = new Flutterwave(process.env.PUBLIC_KEY,process.env.SECRET_KEY);
PUBLIC_KEY = "FLWPUBK_TEST-0f681d304c840c40c28212984b0ed9c5-X";
SECRET_KEY = "FLWSECK_TEST-1679fa4b59ced2c12977519859eaf743-X";
const flw = new Flutterwave(PUBLIC_KEY,SECRET_KEY);
 


// const charge_ng_acct = async () => {
    
//     try {

//         const payload = {
//             "tx_ref": "MC-1585dshdhdsdv5050e8", //This is a unique reference, unique to the particular transaction being carried out. It is generated when it is not provided by the merchant for every transaction.
//             "amount": "100", //This is the amount to be charged.
//             "account_bank": "044", //This is the Bank numeric code. You can get a list of supported banks and their respective codes Here: https://developer.flutterwave.com/v3.0/reference#get-all-banks
//             "account_number": "0690000037",
//             "currency": "R",
//             "email": "vijay.m@unimity.com",
//             "phone_number": "7305510550", //This is the phone number linked to the customer's mobile money account
//             "fullname": "testing vijay"
//         }

//         const response = await flw.Charge.ng(payload)
//         console.log(response);
//         return response;
//     } catch (error) {
//         console.log(error)
//     }

// }


const charge_ng_acct = async (dataJson) => {
    
    try {
        // var dataJson = {};
        console.log("datajsono value from ",dataJson);
        var tx_ref = dataJson.tx_ref;
        var amount = dataJson.amount;
        var currency = dataJson.currency;
        var account_bank = '044';
        var account_number = '0690000037';
        var email = 'olufemi@flw.com';
        var phone_number = '0902620185';
        var fullname = 'Olufemi Obafunmiso';
        const payload = {
            "tx_ref": tx_ref,  
            "amount":  amount,  
            "account_bank": account_bank, 
            "account_number": account_number,
            "currency": currency,
            "email": email,
            "phone_number": phone_number,  
            "fullname": fullname,
        }
        console.log("payload",payload);
        const response = await flw.Charge.ng(payload)
        console.log(response);
        // return(response);
        return response;
    } catch (error) {
        console.log(error)
    }

}


const  bank_trf = async () => {

    try {

        const payload = {
            "tx_ref": "MC-1585230950508",
            "amount": "1500",
            "email": "johnmadakin@gmail.com",
            "phone_number": "054709929220",
            "currency": "R",
            "client_ip": "154.123.220.1",
            "device_fingerprint": "62wd23423rq324323qew1",
            "subaccounts": [
                {
                    "id": "RS_D87A9EE339AE28BFA2AE86041C6DE70E"
                }
            ],
            "duration": 2,
            "frequency": 5,
            "narration": "All star college salary for May",
            "is_permanent": 1,
        }

        const response = await flw.Charge.bank_transfer(payload)
        console.log(response);
        return(response);
      
    } catch (error) {
        console.log(error)
    }

}


const ug_mobile_money =  async () =>{
 
    try {

        const payload = {
            "tx_ref": "MC-1585230950508",
            "amount": "1500",
            "email": "olufemi@flw.com",
            "phone_number": "054709929220",
            "currency": "UGX",
            "fullname": "Olufemi Obafunmiso",
            "redirect_url": "https://rave-webhook.herokuapp.com/receivepayment",
            "voucher": "128373", //This is the voucher code generated by the customer. It is meant to be passed in the initial charge request. (only for Vodafone cash)
            "network": "MTN"
        }

       const response =  await flw.MobileMoney.uganda(payload)
       console.log(response);
    } catch (error) {
        console.log(error)
    }                            
   
}


const fetch_transactions = async () => {

    try {


        const payload = {
            "from": "2020-01-01",
            "to": "2020-05-05"
        }
        const response = await flw.Transaction.fetch(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}


const get_fee = async () => {

    try {


        const payload = {
            "amount": "1000",
            "currency": "R"
        }
        const response = await flw.Transaction.fee(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}


const resendHooks = async () => {

    try {


        const payload = {
            "tx_ref": "rave-123wsvgfwefcwsfc456"
        }
        const response = await flw.Transaction.resend_hooks(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}
const refund = async () => {

    try {
        const payload = {
            "id": "5708", //This is the transaction unique identifier. It is returned in the initiate transaction call as data.id
            "amount":"10"
        }
        const response = await flw.Transaction.refund(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}

const verify = async (dataJson) => {

    try {
        //  const payload = {id: dataJson.id }
        let response = await flw.Transaction.verify({ id: dataJson.transactionId })
        console.log(response);
        return response ;
    } catch (error) {
        console.log(error)
    }

}
const View_Transaction_Timeline = async () => {

    try {
        const payload = {
            "id": "1296063"
         } //This is the unique transaction ID. It is returned in the verify transaction call as data.id}
        const response = await flw.Transaction.event(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}
const getAllTrans = async () => {

    try {
        const payload = {
            "status":"failed"
        }

        const response = await flw.

Transfer.fetch(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}
const createVcard = async () => {

    try {
        const payload = {
            "currency": "R",
            "amount": 200,
            "billing_name": "Jermaine Graham",
            "billing_address": "2014 Forest Hills Drive",
            "billing_city": "Node",
            "billing_state": "Javascript",
            "billing_postal_code": "000009",
            "billing_country": "NG",
            "callback_url": "https://your-callback-url.com/"
        }
        const response = await flw.

VirtualCard.create(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}
const fetchAllVcards = async () => {

    try {
        const response = await flw.

VirtualCard.fetch_all()
        console.log(response);
    } catch (error) {
        console.log(error)
    }

}

const fetchVCard = async () => {

    try {
        const payload = {
            "id":"c6d7f40b-f772-47b7-8136-81256d2f87a2" //This is the unique id of the particular card you want to fetch its details. You can get this id from the call to create a virtual card or list virtual cards as data.id
        }
        const response = await flw.

VirtualCard.fetch(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}
// charge_ng_acct();
const getTransactions = async () => {

    try {
        const payload = {
            "id":"92b5d258-e85f-4ca6-835d-e0c6fa20d958",
            "from":"2019-01-01",
            "to":"2020-05-24",
            "index":"0", //Pass "0" if you want to start from the beginning
            "size":"5"  //Specify how many transactions you want to retrieve in a single call
        }
        const response = await flw.

VirtualCard.transactions(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}


const createBill = async () => {

    try {
        const payload={
            "country": "NG",
            "customer": "+23490803840303",
            "amount": 100,
            "recurrence": "ONCE",
            "type": "AIRTIME",
            "reference": "930rwrwr0049404444" 
         }
        
        const response = await flw.Bills.create_bill(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}

const createOTP = async () => {

    try {

        const payload = {
            "length": 7,
            "customer": { "name": "Kazan", "email": "kazan@mailinator.com", "phone": "2348131149273" },
            "sender": "log t",
            "send": true,
            "medium": ["email", "whatsapp"],
            "expiry": 5
        }

        const response = await flw.Otp.create(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}

const validateOTP = async () => {

    try {

        const payload = {
            "reference": "CF-BARTER-20190420022611377491",
            "otp": "481208"
        }

        const response = await flw.Otp.validate(payload)
        console.log(response);return(response);
    } catch (error) {
        console.log(error)
    }

}

const open = require('open');

// const flw = new Flutterwave("FLWPUBK-*************-X", "FLWSECK-********************-X");



const chargeCard = async (dataJson) => {
    try {
        // console.log("datajson",datajson);
        var card_number = '5531886652142950';
        var cvv = '564';
        var expiry_month = '09';
        var expiry_year = '22';
        var currency = dataJson.currency;
        var amount = dataJson.amount;
        var redirect_url = 'https://www.google.com';
        var fullname = 'Olufemi Obafunmiso';
        var email = 'olufemi@flw.com';
        var phone_number = '0902620185';
        var enckey = 'FLWSECK_TESTbed128835864';
        var tx_ref = dataJson.tx_ref;
        var payload = {
           
            "enckey": enckey,
            "tx_ref": tx_ref, // This is a unique reference, unique to the particular transaction being carried out. It is generated when it is not provided by the merchant for every transaction.
            "card_number": card_number,
            "cvv": cvv,
            "expiry_month": expiry_month,
            "expiry_year": expiry_year,
            "currency": currency,
            "amount": amount,
            "redirect_url": redirect_url,
            "fullname": fullname,
            "email":  email,
            "phone_number": phone_number
        }
        // console.log("payload11111",payload);
        const response = await flw.Charge.card(payload)
        console.log("response",response);
        if (response.meta.authorization.mode === 'pin') {
            let payload2 = payload
            payload2.authorization = {
                "mode": "pin",
                "fields": [
                    "pin"
                ],
                "pin": 3310
            }
            const reCallCharge = await flw.Charge.card(payload2)

            const callValidate = await flw.Charge.validate({
                "otp": "12345",
                "flw_ref": reCallCharge.data.flw_ref
            })
            response.callValidate=callValidate;
            console.log(response.callValidate)

        }
        if (response.meta.authorization.mode === 'redirect') {

            var url = response.meta.authorization.redirect
            open(url)
        }

        console.log("response",response);

        return response;    
    } catch (error) {
        console.log(error)
    }
}

module.exports = {  
    charge_ng_acct,
    bank_trf,
    ug_mobile_money,
    fetch_transactions,
    get_fee,
    resendHooks,
    refund,
    verify,
    View_Transaction_Timeline,
    getAllTrans,
    createVcard,
    fetchAllVcards,
    fetchVCard,
    getTransactions,
    createBill,
    createOTP,
    validateOTP,
    chargeCard
  }